/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.ManageFlights;

import Business.Airliner;
import Business.AirlinerDirectory;
import Business.Flight;
import Business.FlightDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author manalisharma
 */
public class ManageFlighstCatalog extends javax.swing.JPanel {

    /**
     * Creates new form ManageFlight
     */
    
    private FlightDirectory flightDir;    //classlevel variables
    private JPanel ManageFlight;     //class level variables   because we need it to pass through the classs
    Airliner airliner;
    
   

    
    
   public ManageFlighstCatalog(JPanel Manage,  Airliner airliner) {
       initComponents();
       
        this.ManageFlight=Manage;
        this.airliner=airliner;
        airlinerTextfield.setText(airliner.getName());
       
        populate();
     }

   

    

  
    public void populate(){
        
        
        
       
        DefaultTableModel model = (DefaultTableModel)flightDirectory.getModel();
       int rowCount = flightDirectory.getRowCount();
        
        for(int i = rowCount - 1; i >=0; i--) {
            model.removeRow(i);
        }
       
        for(Flight a : airliner.getFlightDirectory().getFlight_Directory()) {
            Object row[] = new Object[7];
            row[0] = a;
            
            row[1]=a.getPrice();
             row[2]=a.getFromDestination();
             row[3]=a.getToDestination();
             row[4]=a.getSchedule();
             row[5]=a.getStartDate();
             row[6]=a.getEndDate();

                     model.addRow(row);
      
       }
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightDirectory = new javax.swing.JTable();
        lblSearchAccNo = new javax.swing.JLabel();
        txtsearch = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        back = new javax.swing.JButton();
        view = new javax.swing.JButton();
        create = new javax.swing.JButton();
        airlinerTextfield = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Airliner Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 16, 183, -1));

        flightDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airplane Name ", "Price", "From Destination", "To Destination", "Schedule", "Start Date", "End Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(flightDirectory);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 87, 918, 113));

        lblSearchAccNo.setText("Search by Airplane Name");
        add(lblSearchAccNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 224, -1, -1));

        txtsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsearchActionPerformed(evt);
            }
        });
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtsearchKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });
        add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 218, 151, -1));

        delete.setBackground(new java.awt.Color(204, 204, 204));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 312, -1, -1));

        back.setBackground(new java.awt.Color(204, 204, 204));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 312, 90, -1));

        view.setBackground(new java.awt.Color(204, 204, 204));
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });
        add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(238, 312, 90, -1));

        create.setBackground(new java.awt.Color(204, 204, 204));
        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        add(create, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 312, 90, -1));
        add(airlinerTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 38, 166, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
        // TODO add your handling code here:
        
        /*DefaultTableModel table = (DefaultTableModel)tblDirectory.getModel();
        String search=txtsearch.getText();
        TableRowSorter<DefaultTableModel> sort =new TableRowSorter<DefaultTableModel>(table);

        tblDirectory.setRowSorter(sort);
        sort.setRowFilter(RowFilter.regexFilter(search));*/
    }//GEN-LAST:event_txtsearchKeyReleased

    private void txtsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtsearchActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
       
        
        
        
        CreatePanel createpanel;
        createpanel = new CreatePanel(airliner,ManageFlight);
         ManageFlight.add("CreatePanel",createpanel);
        CardLayout cardlayout=(CardLayout)ManageFlight.getLayout();
     
        cardlayout.next(ManageFlight);
        
        
    }//GEN-LAST:event_createActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        int row=flightDirectory.getSelectedRow();
        if(row<0)
        //that means there is an error and user has not selected any row
        {
            JOptionPane.showMessageDialog(null,"Please make a selection");
            return; }
        
        else{
          try{
          Flight flight=(Flight)flightDirectory.getValueAt(row, 0);
          ViewPanel panel=new ViewPanel(flight,ManageFlight);
          CardLayout cardlayout=(CardLayout)ManageFlight.getLayout();
          ManageFlight.add("ViewPanel",panel);
          cardlayout.next(ManageFlight);
        }
          catch(Exception e){
              
              JOptionPane.showMessageDialog(null, "error");
          }}
    }//GEN-LAST:event_viewActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        
   
        
        int selectedRow = flightDirectory.getSelectedRow();
        if(selectedRow>=0){
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                Flight airplane= (Flight)flightDirectory.getValueAt(selectedRow, 0);
                airliner.getFlightDirectory().deleteFlight(airplane);
                populate();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
          ManageFlight.remove(this);
        CardLayout cardlayout=(CardLayout)ManageFlight.getLayout();
        cardlayout.previous(ManageFlight);
    }//GEN-LAST:event_backActionPerformed

    private void txtsearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyTyped
        // TODO add your handling code here:
       /*int rowCount = tblDirectory.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblDirectory.getModel();
        for(int i = rowCount - 1; i >=0; i--) {
            model.removeRow(i);
        }
        
        for(Flight a : flightDir.getFlight_Directory()) {
            if(txtsearch.getText().equals(a.getName(){
            
            Object row[] = new Object[3];
            row[0] = a;
            row[1]=a.getAvailSeat();
            row[2]=a.getPrice();
                    
            model.addRow(row);
        }
        
        }*/
        
        
        
        
       
        
        
        
        
        
        
       DefaultTableModel table = (DefaultTableModel)flightDirectory.getModel();
         String search=txtsearch.getText();
         TableRowSorter<DefaultTableModel> sort =new TableRowSorter<DefaultTableModel>(table);
         
         
        flightDirectory.setRowSorter(sort);
         sort.setRowFilter(RowFilter.regexFilter(search)); 
        
    }//GEN-LAST:event_txtsearchKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField airlinerTextfield;
    private javax.swing.JButton back;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JTable flightDirectory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchAccNo;
    private javax.swing.JTextField txtsearch;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
